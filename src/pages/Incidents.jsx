"use client"

import { useEffect, useState } from "react"
import { ArrowLeft } from "lucide-react"
import { Link } from "react-router-dom"
import { incidentsAPI, zonesAPI } from "../services/api"
import DebugPanel from "../components/DebugPanel"
// import APITest from "../components/APITest"
import Skeleton from 'react-loading-skeleton'
import 'react-loading-skeleton/dist/skeleton.css'

import {
  IncidentHeader,
  StatusOverview,
  SearchFilters,
  IncidentList,
  timeAgo,
  getStatusCounts,
  getTypeIcon,
  getStatusColor,
  getPriorityColor,
  getResponderIcon
} from "../components/incidents"

export default function Incidents() {
  const [incidents, setIncidents] = useState([])
  const [filteredIncidents, setFilteredIncidents] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState("all")
  const [typeFilter, setTypeFilter] = useState("all")
  const [priorityFilter, setPriorityFilter] = useState("all")
  const [sortBy, setSortBy] = useState("timestamp")
  const [sortOrder, setSortOrder] = useState("desc")
  const [viewMode, setViewMode] = useState("cards") // cards or table
  const [selectedIncidents, setSelectedIncidents] = useState([])
  const [expandedCard, setExpandedCard] = useState(null)
  const [zones, setZones] = useState([])
  const [zoneMap, setZoneMap] = useState({})

  // Fetch incidents from API
  const fetchIncidents = async () => {
    try {
      setLoading(true)
      setError(null)
      
      const params = {
        limit: 50,
        sortBy,
        sortOrder,
        ...(statusFilter !== 'all' && { status: statusFilter }),
        ...(typeFilter !== 'all' && { type: typeFilter }),
        ...(priorityFilter !== 'all' && { priority: priorityFilter }),
      }

      const response = await incidentsAPI.getIncidents(params)
      
      if (response.success) {
        // Handle the actual API response structure
        const incidentsData = response.data?.incidents || []
        
        console.log('🔍 Raw API Response:', response)
        console.log('📊 Incidents Data:', incidentsData)
        
        // Transform the data to match expected format
        const transformedIncidents = incidentsData.map(incident => ({
          id: incident.id,
          type: incident.type || 'Unknown',
          zoneId: incident.zoneId || '',
          status: incident.status?.toLowerCase() || 'unknown',
          priority: incident.priority || 'medium',
          severity: incident.severity || 3,
          description: incident.description || `Incident in ${incident.zone}`,
          timestamp: incident.timestamp || { seconds: Date.now() / 1000 },
          lastUpdated: incident.lastUpdated || incident.timestamp || { seconds: Date.now() / 1000 },
          assignedResponder: incident.assignedResponder || null,
          environmentalData: incident.environmentalData || {
            temperature: "24°C",
            windSpeed: "10 km/h",
            visibility: "Good",
            airQuality: "Good",
          },
          crowdData: incident.crowdData || {
            density: 50,
            evacuated: 0,
            remaining: 100,
          },
          equipment: incident.equipment || [],
          tags: incident.tags || [],
          media: incident.media || {
            cameras: 0,
            recordings: 0,
            photos: 0,
          },
          location: incident.location || null,
          reportedBy: incident.reportedBy || 'System',
          resolvedAt: incident.resolvedAt || null,
          // Handle legacy fields
          peopleCount: incident.peopleCount,
          source: incident.source,
          autoGenerated: incident.autoGenerated,
          responderType: incident.responderType,
          dispatchTime: incident.dispatchTime,
          responderId: incident.responderId,
          responderName: incident.responderName,
          lat: incident.lat,
          lng: incident.lng,
        }))
        
        console.log('🔄 Transformed Incidents:', transformedIncidents)
        
        setIncidents(transformedIncidents)
      } else {
        throw new Error(response.error || 'Failed to fetch incidents')
      }
    } catch (err) {
      console.error('Error fetching incidents:', err)
      setError(err.message)
      setIncidents([])
    } finally {
      setLoading(false)
    }
  }

  // Filter incidents based on search term
  const filterIncidents = () => {
    let filtered = incidents

    console.log('🔍 Filtering incidents:', {
      total: incidents.length,
      searchTerm,
      statusFilter,
      typeFilter,
      priorityFilter
    })

    if (searchTerm) {
      filtered = filtered.filter(incident =>
        incident.type?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        incident.zone?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        incident.description?.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    console.log('✅ Filtered incidents:', filtered.length)
    setFilteredIncidents(filtered)
  }

  // Handle incident status update
  const handleStatusUpdate = async (incidentId, newStatus) => {
    try {
      const response = await incidentsAPI.updateIncident(incidentId, { status: newStatus })
      
      if (response.success) {
        // Update local state
        setIncidents(prev => prev.map(incident => 
          incident.id === incidentId 
            ? { ...incident, status: newStatus }
            : incident
        ))
      } else {
        throw new Error(response.error || 'Failed to update incident')
      }
    } catch (err) {
      console.error('Error updating incident status:', err)
      alert(`Failed to update incident status: ${err.message}`)
    }
  }

  // Handle bulk actions
  const handleBulkAction = async (action) => {
    if (selectedIncidents.length === 0) {
      alert('Please select incidents first')
      return
    }

    try {
      const updates = selectedIncidents.map(id => ({ id, status: action }))
      const response = await incidentsAPI.bulkUpdateIncidents({ updates })
      
      if (response.success) {
        // Update local state
        setIncidents(prev => prev.map(incident => 
          selectedIncidents.includes(incident.id)
            ? { ...incident, status: action }
            : incident
        ))
        setSelectedIncidents([])
        alert(`Successfully updated ${selectedIncidents.length} incidents`)
      } else {
        throw new Error(response.error || 'Failed to update incidents')
      }
    } catch (err) {
      console.error('Error performing bulk action:', err)
      alert(`Failed to perform bulk action: ${err.message}`)
    }
  }

  // Handle incident deletion
  const handleDeleteIncident = async (incidentId) => {
    if (!confirm('Are you sure you want to delete this incident?')) {
      return
    }

    try {
      const response = await incidentsAPI.deleteIncident(incidentId)
      
      if (response.success) {
        setIncidents(prev => prev.filter(incident => incident.id !== incidentId))
        alert('Incident deleted successfully')
      } else {
        throw new Error(response.error || 'Failed to delete incident')
      }
    } catch (err) {
      console.error('Error deleting incident:', err)
      alert(`Failed to delete incident: ${err.message}`)
    }
  }

  // Fetch all zones
  const fetchZones = async () => {
    try {
      const response = await zonesAPI.getZones()
      if (response.success) {
        setZones(response.data?.zones || [])
        // Create a map of zoneId -> zone object
        const map = {}
        for (const zone of response.data?.zones || []) {
          map[zone.id] = zone
        }
        setZoneMap(map)
      }
    } catch (err) {
      console.error('Error fetching zones:', err)
      setZones([])
      setZoneMap({})
    }
  }

  // Fetch data on component mount and when filters change
  useEffect(() => {
    fetchIncidents()
  }, [sortBy, sortOrder, statusFilter, typeFilter, priorityFilter])

  // Filter incidents when search term or incidents change
  useEffect(() => {
    filterIncidents()
  }, [searchTerm, incidents])

  // Fetch zones on component mount
  useEffect(() => {
    fetchZones()
  }, [])

  // Get status counts for overview
  const statusCounts = getStatusCounts(incidents)

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-7xl mx-auto">
          <div>
            <Skeleton height={32} width={200} className="mb-6" />
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              {[...Array(4)].map((_, i) => (
                <Skeleton key={i} height={96} />
              ))}
            </div>
            <Skeleton height={384} />
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <h3 className="text-red-800 font-medium">Error Loading Incidents</h3>
            <p className="text-red-600 mt-1">{error}</p>
            <button 
              onClick={fetchIncidents}
              className="mt-3 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
            >
              Retry
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto p-6">
        {/* API Test Component */}
        {/* <APITest /> */}

        {/* Header */}
        <IncidentHeader 
          totalIncidents={incidents.length}
          selectedCount={selectedIncidents.length}
          onBulkAction={handleBulkAction}
          viewMode={viewMode}
          setViewMode={setViewMode}
        />

        {/* Status Overview */}
        <StatusOverview statusCounts={statusCounts} />

        {/* Search and Filters */}
        <SearchFilters
          searchTerm={searchTerm}
          setSearchTerm={setSearchTerm}
          statusFilter={statusFilter}
          setStatusFilter={setStatusFilter}
          typeFilter={typeFilter}
          setTypeFilter={setTypeFilter}
          priorityFilter={priorityFilter}
          setPriorityFilter={setPriorityFilter}
          sortBy={sortBy}
          setSortBy={setSortBy}
          sortOrder={sortOrder}
          setSortOrder={setSortOrder}
        />

        {/* Incident List */}
        <IncidentList
          loading={loading}
          filteredIncidents={filteredIncidents}
          searchTerm={searchTerm}
          statusFilter={statusFilter}
          typeFilter={typeFilter}
          priorityFilter={priorityFilter}
          typeInfo={getTypeIcon}
          getStatusColor={getStatusColor}
          getPriorityColor={getPriorityColor}
          getResponderIcon={getResponderIcon}
          timeAgo={timeAgo}
          selectedIncidents={selectedIncidents}
          setSelectedIncidents={setSelectedIncidents}
          expandedCard={expandedCard}
          setExpandedCard={setExpandedCard}
          zoneMap={zoneMap}
        />

        {/* Debug Panel */}
        <DebugPanel 
          data={{
            rawIncidents: incidents,
            filteredIncidents: filteredIncidents,
            statusCounts: statusCounts,
            loading: loading,
            error: error
          }} 
          title="Incidents Debug"
        />
      </div>
    </div>
  )
}
